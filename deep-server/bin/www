#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');

var debug = require('debug')('deep-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * ADDED!! Require Socket.IO
 */
var io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * ADDED!! Socket.IO Connection.
 */

 db = [];
 db = new Array();

 userList = [];


 io.on('connection', function(socket){
   var joinedUser = false;
   var nickname;

   // 유저 입장
   socket.on('join', function(data){
     if (joinedUser) { // 이미 입장 했다면 중단
       return false;
     }

     nickname = data;
     userList.push(nickname);
     console.log(userList);

     socket.broadcast.emit('join', {nickname : nickname, userList : userList});
     socket.emit('welcome', {nickname : nickname,userList : userList});

     joinedUser = true;
   });


   // 메시지 전달
   socket.on('msg', function(data){
     console.log(' '+data.nickname + ' >> ' + data.opp + ' [ msg: '+data.msg+' ] ');
     io.emit('msg', {
       nickname : data.nickname
       ,msg : data.msg
       ,opp : data.opp
       ,userList : userList
     });
   });

   // 접속 종료
   socket.on('disconnect', function () {
     // 입장하지 않았다면 중단
     if ( !joinedUser) {
       console.log('--- not joinedUser left');
       return false;
     }

     // 접속자목록에서 제거
     var i = userList.indexOf(nickname);
     var tmpUserList = userList;
     userList.splice(i,1);

     socket.broadcast.emit('left', {
       nickname : nickname
       ,userList : userList
       ,tmpUserList : tmpUserList
     });
   });
 });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
